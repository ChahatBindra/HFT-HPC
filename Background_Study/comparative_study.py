# -*- coding: utf-8 -*-
"""Comparative_Study

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1N2_K6GeesJ0ju3MCezW2Wes5Nqkzxxr6
"""



"""# Accuracy Graph

## Accuracy Graph Serial Operation
"""



"""## Accuracy Graph Parallel Operation"""



"""## Time Graph Serial Operation"""



"""## Time Graph Parallel Operation"""



Average1  =  7.518634436130523

Average2  =  0.8234196615219116

import matplotlib.pyplot as plt

left = [1, 2]

height = [Average1,Average2]
  
# labels for bars
tick_label = ['Series', 'Pararllel']
  
# plotting a bar chart
plt.bar( left,height,width = 0.8, color = ['red', "blue"])
  
# naming the x-axis
# plt.xlabel('Steps')
# naming the y-axis
plt.ylabel('Time Taken')
# plot title
plt.title('Average Comparsion!')
  
# function to show the plot
plt.show()



"""## Series Time with different epochs """



"""## Pararllel Time with Different Epochs"""



"""## Series Time with different batch sizes """



"""## Parallel Time with different batch sizes """



epochs = [50,100,150,200,250,300]
batch_size = [8,16,32,64,128,256]

"""# Epochs """

epoch_parallel = [46.38532280921936,
 87.28336763381958,
 130.92563438415527,
 177.44652891159058,
 230.8568344116211,
 282.4199450016022]

epoch_series = [371.3688442707062,
 759.7471606731415,
 1141.3886785507202,
 1550.3176546096802,
 1963.4198977947235,
 2424.1472334861755]



import matplotlib
import matplotlib.pyplot as plt
import numpy as np


labels = epochs 

x = np.arange(len(labels))  # the label locations
width = 0.35  # the width of the bars

fig, ax = plt.subplots()
rects1 = ax.bar(x - width/2, epoch_series, width, label='Series')
rects2 = ax.bar(x + width/2, epoch_parallel, width, label='Parallel')

# Add some text for labels, title and custom x-axis tick labels, etc.
ax.set_ylabel('Time Taken')
ax.set_xlabel('Epochs')
ax.set_xticks(x)
ax.set_xticklabels(labels)
ax.legend()

ax.set_title('Epochs Comparison')
def autolabel(rects):
    """Attach a text label above each bar in *rects*, displaying its height."""
    for rect in rects:
        height = int(rect.get_height())
        ax.annotate('{}'.format(height),
                    xy=(rect.get_x() + rect.get_width() / 2, height),
                    xytext=(0, 3),  # 3 points vertical offset
                    textcoords="offset points",
                    ha='center', va='bottom')


autolabel(rects1)
autolabel(rects2)

fig.tight_layout()

plt.show()



batch_parallel = [325.25278306007385,
 177.21244525909424,
 96.30083227157593,
 54.77957010269165,
 33.96306610107422,
 21.704179525375366]

batch_series = [2338.4703731536865,
 1311.2113440036774,
 769.5540792942047,
 498.8238003253937,
 385.72358775138855,
 325.84753942489624]

import matplotlib
import matplotlib.pyplot as plt
import numpy as np


labels = batch_size 

x = np.arange(len(labels))  # the label locations
width = 0.35  # the width of the bars

fig, ax = plt.subplots()
rects1 = ax.bar(x - width/2, batch_series, width, label='Series')
rects2 = ax.bar(x + width/2, batch_parallel, width, label='Parallel')

# Add some text for labels, title and custom x-axis tick labels, etc.
ax.set_ylabel('Time Taken')
ax.set_xlabel('Batch Size')
ax.set_xticks(x)
ax.set_xticklabels(labels)
ax.legend()

ax.set_title('Batch Size Comparison')
def autolabel(rects):
    """Attach a text label above each bar in *rects*, displaying its height."""
    for rect in rects:
        height = int(rect.get_height())
        ax.annotate('{}'.format(height),
                    xy=(rect.get_x() + rect.get_width() / 2, height),
                    xytext=(0, 3),  # 3 points vertical offset
                    textcoords="offset points",
                    ha='center', va='bottom')


autolabel(rects1)
autolabel(rects2)

fig.tight_layout()

plt.show()



